{"version":3,"sources":["components/searchbox.js","components/card.js","components/cardlist.js","components/scroll.js","components/errorBoundry.js","containers/app.js","serviceWorker.js","index.js"],"names":["SearchBox","emPesquisa","className","style","width","type","placeholder","onChange","Card","name","email","id","border","alt","src","CardList","robots","map","user","i","key","Scroll","props","overflowY","marginTop","float","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","emPesquisaAtiva","event","campoPesquisa","target","value","robo","fetch","then","dados","json","usuarios","filtrarRobo","filter","toLowerCase","includes","React","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"kSAkBeA,EAfG,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WACnB,OACC,yBAAKC,UAAU,eACd,2BACCC,MAAO,CAACC,MAAM,QACdF,UAAU,qBACVG,KAAK,SACLC,YAAY,gBACZC,SAAYN,MCODO,EAfF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,MAAOC,EAAQ,EAARA,GAC3B,OACC,yBACAR,MAAO,CAACS,OAAQ,+BAChBV,UAAU,iDACT,yBAAMW,IAAK,SAASC,IAAG,+BAA0BH,EAA1B,cACvB,6BACC,4BAAKF,GACL,2BAAIC,MCcOK,EArBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACnB,OACC,6BAIEA,EAAOC,KAAI,SAACC,EAAMC,GACjB,OACC,kBAAC,EAAD,CACCC,IAAKD,EACLR,GAAIK,EAAOG,GAAGR,GACdF,KAAMO,EAAOG,GAAGV,KAChBC,MAAOM,EAAOG,GAAGT,aCLTW,G,MARA,SAACC,GACZ,OACI,yBAAKpB,UAAU,SAASC,MAAO,CAACoB,UAAU,SAASC,UAAU,OAAQC,MAAM,WACtEH,EAAMI,YCgBJC,E,kDAnBb,WAAYL,GAAO,IAAD,8BAChB,cAAMA,IACDM,MAAQ,CACXC,UAAU,GAHI,E,8DAOAC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAI1B,OAAIG,KAAKJ,MAAMC,SACN,4DAEFG,KAAKV,MAAMI,a,GAhBKQ,aC8DZC,G,wDAnDd,aAAc,IAAD,8BACZ,gBAeDC,gBAAkB,SAACC,GAClB,EAAKJ,SAAS,CAACK,cAAeD,EAAME,OAAOC,SAf3C,EAAKZ,MAAQ,CACZa,KAAM,GAENH,cAAe,IALJ,E,gEASO,IAAD,OAClBI,MAAM,8CACJC,MAAM,SAAAC,GAAU,OAAOA,EAAMC,UAC7BF,MAAK,SAAAG,GAAa,EAAKb,SAAS,CAACQ,KAAMK,S,+BASjC,IAAD,OAGDC,EAAcf,KAAKJ,MAAMa,KAAKO,QAAO,SAAAP,GAE1C,OAAQA,EAAKhC,KAAKwC,cAAcC,SAAS,EAAKtB,MAAMU,cAAcW,gBACjER,EAAK/B,MAAMwC,SAAS,EAAKtB,MAAMU,kBAEjC,OACC,yBAAKpC,UAAU,MACd,yBAAKA,UAAU,UACd,wBAAIA,UAAU,MAAd,gBACA,kBAAC,EAAD,CAAWA,UAAU,YAAaD,WAAY+B,KAAKI,kBACnD,+BAOD,kBAAC,EAAD,KACC,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUpB,OAAQ+B,W,GA/CNI,IAAMjB,YCGJkB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OAAO,kBAAC,EAAD,MAAUC,SAASC,eAAe,SD2H5C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,c","file":"static/js/main.0431c644.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n//A propiedade usada aqui é emPesquisa\r\nconst SearchBox = ({emPesquisa}) => {\r\n\treturn (\r\n\t\t<div className='pa2 measure'>\r\n\t\t\t<input \r\n\t\t\t\tstyle={{width:'30vw'}}\r\n\t\t\t\tclassName='pa3 ba b--black-20'\r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='name or email' \r\n\t\t\t\tonChange = {emPesquisa}\r\n\t\t\t/>\r\n\t\t{/*onChange é um evento no DOM, quando o valor do elemento muda (nesse caso a tag input) a função escolhida será iniciada*/}\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n//Card recebe o valor de suas propiedades do Componente CardList.\r\nconst Card = ({name, email, id}) => {\r\n\treturn (\r\n\t\t<div \r\n\t\tstyle={{border: '2px solid rgb(40, 127, 185)'}}\r\n\t\tclassName='tc dib white-80 br3 pa3 ma2 grow bw2 shadow-5'>\r\n\t\t\t<img  alt ='robots' src={`https://robohash.org/${id}?200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\t\r\n\t\t</div>\r\n\t);//Aqui é feito o template do cartão do robo utilizando os classname dos tachyons. \r\n\t//{} são utilizada para indicar codigo javascript(nesse caso os valores das propiedades)\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './card';\r\n\r\n//A propiedade robots recebes seus valores de App, esse valor sendo o objeto robots\r\nconst CardList = ({ robots }) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{//.map percorre o objeto robots e retorna o Componente Card \r\n\t\t\t\t//atribuindo a ele os valores de robots com o indice no valor i.\r\n\t\t\t\t//Isso permite que o conteudo seja gerado de forma dinamica.\r\n\t\t\t\trobots.map((user, i) => {\r\n\t\t\t\t\treturn (\r\n\t\t\t\t\t\t<Card \r\n\t\t\t\t\t\t\tkey={i} \r\n\t\t\t\t\t\t\tid={robots[i].id} \r\n\t\t\t\t\t\t\tname={robots[i].name} \r\n\t\t\t\t\t\t\temail={robots[i].email} \r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)\t\t\r\n\t\t\t\t})\r\n\t\t\t}\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\nimport './scroll.css';\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div className=\"scroll\" style={{overflowY:'scroll',marginTop:'20vh', float:'center'}}>     \r\n            {props.children}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state = {\r\n      hasError: false\r\n    }\r\n  }\r\n\r\n  componentDidCatch(error, info){\r\n    this.setState({ hasError: true })\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError){\r\n      return <h1>Ooops. Something went wrong.</h1>\r\n    }\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundry","import React from 'react';\r\nimport SearchBox from '../components/searchbox';\r\nimport CardList from '../components/cardlist';\r\nimport Scroll from '../components/scroll';\r\nimport ErrorBoundry from '../components/errorBoundry.js';\r\nimport './app.css';\r\n//robots é importado aqui e passa a ser usado em card e cardlist\r\n\r\n\r\nclass App extends React.Component{\r\n\r\n\t//Esse construtor permite que componentes vizinhos interajam entre si. \r\n\t//Nesse caso o input na barra de pesquisa filtra o objeto robo.\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\trobo: [],\r\n\t\t\t//Campo de pesquisa começa vazio a medida que for inputado valores começara a filtragem.\r\n\t\t\tcampoPesquisa: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount(){\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t\t.then( dados => {return dados.json(); })\r\n\t\t\t.then(usuarios => {this.setState({robo: usuarios}); })\r\n\t}\r\n\r\n\t//Quando ouver mudança na barra de pesquisa o valor de campoPesquisa passa a ser o valor inputado.\r\n\temPesquisaAtiva = (event) => {\r\n\t\tthis.setState({campoPesquisa: event.target.value})\r\n\r\n\t}\r\n\t//essa é a parte renderizada ao usuario.\r\n\trender(){\r\n\t\t//Metodo de filtragem: o metodo .filter() retorna os card que incluem os nomes que incluem o input\r\n\t\t//ou os emails que incluem o input\r\n\t\tconst filtrarRobo = this.state.robo.filter(robo => {\r\n\t\t\t//No caso do nome usar .toLowerCase() facilita na busca, já o email não pode utilizar isso\r\n\t\t\treturn (robo.name.toLowerCase().includes(this.state.campoPesquisa.toLowerCase()) || \r\n\t\t\t\trobo.email.includes(this.state.campoPesquisa));\r\n\t\t})\r\n\t\treturn (\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<nav className=\"navBar\">\r\n\t\t\t\t\t<h1 className=\"f1\">Robo Friends</h1>\r\n\t\t\t\t\t<SearchBox className='searchBar'  emPesquisa={this.emPesquisaAtiva}/>\r\n\t\t\t\t\t<div></div>\r\n\t\t\t\t\t{/* O componente SearchBox utiliza a propiedade emPesquisa \r\n\t\t\t\t\te essa recebe o metodo emPesquisaAtiva */}\r\n\t\t\t\t</nav>\r\n\t\t\t\t{/*O componente CardList utiliza a propiedade robots(o objeto robo) \r\n\t\t\t\te essa recebe o metodo filtrarRobo,\r\n\t\t\t\tque retorna somente os valores filtrados do metodo. */}\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<ErrorBoundry>\r\n\t\t\t\t\t\t<CardList robots={filtrarRobo}/>\r\n\t\t\t\t\t</ErrorBoundry>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/app';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n//tachyons é importado aqui e passa a ser usado pelos componentes\n\nReactDOM.render(<App /> , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}